        .text
        .globl func
        .type func, @function
func:
        pushl %ebp
        movl %esp, %ebp
        subl $0, %esp
        movl $0, 4(%ebp)
        movl $0, 8(%ebp)
        jmp {.L1,   %7 = load i32, ptr %4, align 4}
        movl 8(%ebp), %edx
        movl 0(%ebp), %ecx
        movl %edx, %ebx
        cmpl %ecx, %ebx
        movl %eax, 44(%ebp)
        jl {.L5,   %21 = load i32, ptr %3, align 4}
        jmp {.L2,   %11 = call i32 (...) @read()}
        pushl %ebx
        pushl %ecx
        pushl %edx
        call func
        addl $4, %esp
        popl %edx
        popl %ecx
        popl %ebx
        movl %, 12(%ebp)
        movl 12(%ebp), %edx
        movl 4(%ebp), %ecx
        movl %edx, %ebx
        cmpl %ecx, %ebx
        movl %eax, 24(%ebp)
        jg {.L4,   %18 = load i32, ptr %4, align 4}
        jmp {.L3,   %16 = load i32, ptr %5, align 4}
        movl 12(%ebp), %edx
        movl %edx, 4(%ebp)
        jmp {.L4,   %18 = load i32, ptr %4, align 4}
        movl 8(%ebp), %edx
        movl %edx, %ecx
        addl $1, %ecx
        movl %eax, 40(%ebp)
        movl %ecx, 8(%ebp)
        jmp {.L1,   %7 = load i32, ptr %4, align 4}
        movl 4(%ebp), %edx
        movl 28(%ebp), %eax
         movl %ebp, %esp
         popl %ebp
        leave
        ret
        .text
        .globl read
        .type read, @function
read:
        pushl %ebp
        movl %esp, %ebp
        subl $56, %esp